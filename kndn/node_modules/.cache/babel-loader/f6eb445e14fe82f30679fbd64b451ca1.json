{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lappv\\\\Desktop\\\\KNDN\\\\kndn\\\\src\\\\app\\\\routing\\\\Routes.tsx\";\n\n/**\r\n * High level router.\r\n *\r\n * Note: It's recommended to compose related routes in internal router\r\n * components (e.g: `src/app/modules/Auth/pages/AuthPage`, `src/app/BasePage`).\r\n */\nimport React from 'react';\nimport { Switch } from 'react-router-dom';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { MasterLayout } from '../../_metronic/layout/MasterLayout';\nimport { PrivateRoutes } from './PrivateRoutes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Routes = () => {\n  const isAuthorized = useSelector(_ref => {\n    let {\n      auth\n    } = _ref;\n    return auth.accessToken;\n  }, shallowEqual);\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: /*#__PURE__*/_jsxDEV(MasterLayout, {\n      children: /*#__PURE__*/_jsxDEV(PrivateRoutes, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\nexport { Routes };","map":{"version":3,"names":["React","Switch","shallowEqual","useSelector","MasterLayout","PrivateRoutes","Routes","isAuthorized","auth","accessToken"],"sources":["C:/Users/lappv/Desktop/KNDN/kndn/src/app/routing/Routes.tsx"],"sourcesContent":["/**\r\n * High level router.\r\n *\r\n * Note: It's recommended to compose related routes in internal router\r\n * components (e.g: `src/app/modules/Auth/pages/AuthPage`, `src/app/BasePage`).\r\n */\r\n\r\nimport React, {FC} from 'react'\r\nimport {Redirect, Switch, Route} from 'react-router-dom'\r\nimport {shallowEqual, useSelector} from 'react-redux'\r\nimport {MasterLayout} from '../../_metronic/layout/MasterLayout'\r\nimport {PrivateRoutes} from './PrivateRoutes'\r\nimport {ErrorsPage} from '../modules/errors/ErrorsPage'\r\nimport {RootState} from '../../setup'\r\nimport {MasterInit} from '../../_metronic/layout/MasterInit'\r\n\r\nconst Routes: FC = () => {\r\n  const isAuthorized = useSelector<RootState>(({auth}) => auth.accessToken, shallowEqual)\r\n  return (\r\n    <Switch>\r\n      <MasterLayout>\r\n        <PrivateRoutes />\r\n      </MasterLayout>\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport {Routes}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAwB,OAAxB;AACA,SAAkBC,MAAlB,QAAsC,kBAAtC;AACA,SAAQC,YAAR,EAAsBC,WAAtB,QAAwC,aAAxC;AACA,SAAQC,YAAR,QAA2B,qCAA3B;AACA,SAAQC,aAAR,QAA4B,iBAA5B;;;AAKA,MAAMC,MAAU,GAAG,MAAM;EACvB,MAAMC,YAAY,GAAGJ,WAAW,CAAY;IAAA,IAAC;MAACK;IAAD,CAAD;IAAA,OAAYA,IAAI,CAACC,WAAjB;EAAA,CAAZ,EAA0CP,YAA1C,CAAhC;EACA,oBACE,QAAC,MAAD;IAAA,uBACE,QAAC,YAAD;MAAA,uBACE,QAAC,aAAD;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,CATD;;AAWA,SAAQI,MAAR"},"metadata":{},"sourceType":"module"}